# =====================================================================
#   This file was autogenerated. Do not edit it manually!
#   save all your custom variables and targets in Makefile.expansion!
# =====================================================================
#
# Old-skool build tools.
#
# Commonly used targets (see each target for more information):
#   all: Build code.
#   test: Run tests.
#   clean: Clean up.
# 

# It's necessary to set this because some environments don't link sh -> bash.
SHELL := /bin/bash

# Default target
.DEFAULT_GOAL := all

# We don't need make's built-in rules.
MAKEFLAGS += --no-builtin-rules
.SUFFIXES:

define command_exists
	@$(shell command -v $(1) >/dev/null 2>&1)
endef

# user defined Makefile to expands targets
-include Makefile.expansion

MYMAKE := bash $(MAKE_RULES_ROOT)/entrypoint.sh

define ALL_HELP_INFO
# Build code.
# make all == make build
#
# Args:
#   WHAT: Directory names to build.  If any of these directories has a 'main'
#     package, the build will produce executable files under bin/.
#     If not specified, "everything" will be built.
#   GOFLAGS: Extra flags to pass to 'go' when building.
#   GOLDFLAGS: Extra linking flags passed to 'go' when building.
#   GOGCFLAGS: Additional go compile flags passed to 'go' when building.
#
# Example:
#   make
#   make all or make build
#   make build WHAT=cmd/server GOFLAGS=-v
#   make all GOGCFLAGS="-N -l"
#     Note: Use the -N -l options to disable compiler optimizations an inlining.
#           Using these build options allows you to subsequently use source
#           debugging tools like delve.
endef
.PHONY: all build
ifeq ($(HELP),y)
all build:
	@echo "$$ALL_HELP_INFO"
else
all build:
	$(MYMAKE) go build $(WHAT)
endif

docker-images: build e2e
	./hack/make-rules/build-images.sh

local-up: docker-images
	bash ./hack/make-rules/local-up.sh godel-demo-default

local-up-labels: docker-images
	bash ./hack/make-rules/local-up.sh godel-demo-labels

define GO_BUILD_HELP_INFO
# Build code.
#
# Args:
#   GOFLAGS: Extra flags to pass to 'go' when building.
#   GOLDFLAGS: Extra linking flags passed to 'go' when building.
#   GOGCFLAGS: Additional go compile flags passed to 'go' when building.
#
# Example:
#   make $(1)
#   make $(1) GOFLAGS=-v
#   make $(1) GOGCFLAGS="-N -l"
#     Note: Use the -N -l options to disable compiler optimizations an inlining.
#           Using these build options allows you to subsequently use source
#           debugging tools like delve.
endef
.PHONY: $(GO_BUILD_TARGETS)
ifeq ($(HELP),y)
$(GO_BUILD_TARGETS):
	$(call GO_BUILD_HELP_INFO, $@)
else
$(GO_BUILD_TARGETS):
	$(MYMAKE) go build $@
endif 

define UNITTEST_HELP_INFO
# Run uniitest 
#
# Args:
#   GOFLAGS: Extra flags to pass to 'go' when building.
#   GOLDFLAGS: Extra linking flags passed to 'go' when building.
#   GOGCFLAGS: Additional go compile flags passed to 'go' when building.
#
# Example:
#   make
#   make unittest
#   make unittest GOFLAGS="-v -x"
#   make unittest GOGCFLAGS="-N -l"
#     Note: Use the -N -l options to disable compiler optimizations an inlining.
#           Using these build options allows you to subsequently use source
#           debugging tools like delve.
endef
.PHONY: unittest
ifeq ($(HELP),y)
unittest:
	@echo "$$UNITTEST_HELP_INFO"
else
unittest: 
	$(MYMAKE) go unittest
endif 

define E2E_TEST_INFO
# get e2e bin file.
#
# Example:
#   make e2e
#
endef
.PHONY: e2e
ifeq ($(HELP),y)
e2e:
    @echo "$$E2E_TEST_INFO"
else
e2e:
	go test -c -o ./bin/linux_amd64/e2e.test github.com/kubewharf/godel-scheduler/test/e2e
endif

.PHONY: logcheck
logcheck:
	./hack/verify-logcheck.sh

define BUILD_LOCAL_HELP_INFO
# Build code on local.
#
# Args:
#   WHAT: Directory names to build.  If any of these directories has a 'main'
#     package, the build will produce executable files under bin/.
#     If not specified, "everything" will be built.
#   GOFLAGS: Extra flags to pass to 'go' when building.
#   GOLDFLAGS: Extra linking flags passed to 'go' when building.
#   GOGCFLAGS: Additional go compile flags passed to 'go' when building.
#
# Example:
#   make
#   make build-local
#   make build-local WHAT=cmd/server GOFLAGS=-v
#   make build-local GOGCFLAGS="-N -l"
#     Note: Use the -N -l options to disable compiler optimizations an inlining.
#           Using these build options allows you to subsequently use source
#           debugging tools like delve.
endef
.PHONY: build-local
ifeq ($(HELP),y)
build-local:
	@echo "$$BUILD_LOCAL_HELP_INFO"
else
build-local:
	LOCAL_BUILD=true $(MYMAKE) go build $(WHAT) 
endif 

define BUILD_IN_CONTAINER_HELP_INFO
# Build code in container.
#
# Args:
#   WHAT: Directory names to build.  If any of these directories has a 'main'
#     package, the build will produce executable files under bin/.
#     If not specified, "everything" will be built.
#   GOFLAGS: Extra flags to pass to 'go' when building.
#   GOLDFLAGS: Extra linking flags passed to 'go' when building.
#   GOGCFLAGS: Additional go compile flags passed to 'go' when building.
#
# Example:
#   make
#   make build-in-container
#   make build-in-container WHAT=cmd/server GOFLAGS=-v
#   make build-in-container GOGCFLAGS="-N -l"
#     Note: Use the -N -l options to disable compiler optimizations an inlining.
#           Using these build options allows you to subsequently use source
#           debugging tools like delve.
endef
.PHONY: build-in-container
ifeq ($(HELP),y)
build-in-container:
	@echo "$$BUILD_LINUX_HELP_INFO"
else
build-in-container:
	LOCAL_BUILD=false $(MYMAKE) go build $(WHAT) 
endif 

define CONTAINER_HELP_INFO
# Build container image.
#
# Args:
#   WHAT: Directories containing Dockerfile.
#
# Example:
#   make container
#   make container WHAT=build/server
endef
.PHONY: container 
ifeq ($(HELP),y)
container:
	@echo "$$CONTAINER_HELP_INFO"
else
container: 
	$(MYMAKE) container build $(WHAT)
endif 

define DOCKER_BUILD_HELP_INFO 
 # Build container image.
#
# Example:
#   make $(1)  
endef
.PHONY: $(DOCKER_BUILD_TARGETS)
ifeq ($(HELP),y)
$(DOCKER_BUILD_TARGETS):
	$(call DOCKER_BUILD_HELP_INFO, $@)
else
$(DOCKER_BUILD_TARGETS):
	$(MYMAKE) container build $@
endif 

define PUSH_HELP_INFO
# Push container image.
# You should run make container before push
#
# Args:
#   WHAT: Directory names containing Dockerfile.
#
# Example:
#   make push
#   make push WHAT=build/server
endef
.PHONY: push 
ifeq ($(HELP),y)
push:
	@echo "$$PUSH_HELP_INFO"
else
push: 
	$(MYMAKE) container push $(WHAT)
endif 


define CLEAN_HELP_INFO
# Remove all container artifacts.
#
# Example:
#   make clean
#
endef
.PHONY: clean
ifeq ($(HELP),y)
clean:
	@echo "$$CLEAN_HELP_INFO"
else
clean: 
	$(MYMAKE) clean
endif

.PHONY: manifests
manifests:
	@hack/generate-code.sh

.PHONY: debug-makefile
debug-makefile:
	$(MYMAKE) debug

.PHONY: fmt
fmt:
	gofmt -w ./pkg ./cmd ./test

# format all imports, `goimports` is required.
goimports:
	@hack/update-goimports.sh
